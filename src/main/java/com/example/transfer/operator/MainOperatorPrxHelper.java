// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `MainOperatorDef.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.example.transfer.operator;

public final class MainOperatorPrxHelper extends Ice.ObjectPrxHelperBase implements MainOperatorPrx
{
    private static final String __getBond_name = "getBond";

    public com.example.transfer.dto.Bond getBond(String name)
    {
        return getBond(name, null, false);
    }

    public com.example.transfer.dto.Bond getBond(String name, java.util.Map<String, String> __ctx)
    {
        return getBond(name, __ctx, true);
    }

    private com.example.transfer.dto.Bond getBond(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getBond_name);
        return end_getBond(begin_getBond(name, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getBond(String name)
    {
        return begin_getBond(name, null, false, false, null);
    }

    public Ice.AsyncResult begin_getBond(String name, java.util.Map<String, String> __ctx)
    {
        return begin_getBond(name, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getBond(String name, Ice.Callback __cb)
    {
        return begin_getBond(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getBond(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBond(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getBond(String name, Callback_MainOperator_getBond __cb)
    {
        return begin_getBond(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getBond(String name, java.util.Map<String, String> __ctx, Callback_MainOperator_getBond __cb)
    {
        return begin_getBond(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getBond(String name, 
                                         IceInternal.Functional_GenericCallback1<com.example.transfer.dto.Bond> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getBond(name, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getBond(String name, 
                                         IceInternal.Functional_GenericCallback1<com.example.transfer.dto.Bond> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getBond(name, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getBond(String name, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<com.example.transfer.dto.Bond> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getBond(name, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getBond(String name, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<com.example.transfer.dto.Bond> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getBond(name, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getBond(String name, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_GenericCallback1<com.example.transfer.dto.Bond> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getBond(name, __ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackArg1<com.example.transfer.dto.Bond>(__responseCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         MainOperatorPrxHelper.__getBond_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_getBond(String name, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBond_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getBond_name, __cb);
        try
        {
            __result.prepare(__getBond_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public com.example.transfer.dto.Bond end_getBond(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getBond_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            com.example.transfer.dto.BondHolder __ret = new com.example.transfer.dto.BondHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getBond_completed(Ice.TwowayCallbackArg1<com.example.transfer.dto.Bond> __cb, Ice.AsyncResult __result)
    {
        com.example.transfer.operator.MainOperatorPrx __proxy = (com.example.transfer.operator.MainOperatorPrx)__result.getProxy();
        com.example.transfer.dto.Bond __ret = null;
        try
        {
            __ret = __proxy.end_getBond(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __transferBond_name = "transferBond";

    public void transferBond(com.example.transfer.dto.Bond bond)
    {
        transferBond(bond, null, false);
    }

    public void transferBond(com.example.transfer.dto.Bond bond, java.util.Map<String, String> __ctx)
    {
        transferBond(bond, __ctx, true);
    }

    private void transferBond(com.example.transfer.dto.Bond bond, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_transferBond(begin_transferBond(bond, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_transferBond(com.example.transfer.dto.Bond bond)
    {
        return begin_transferBond(bond, null, false, false, null);
    }

    public Ice.AsyncResult begin_transferBond(com.example.transfer.dto.Bond bond, java.util.Map<String, String> __ctx)
    {
        return begin_transferBond(bond, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_transferBond(com.example.transfer.dto.Bond bond, Ice.Callback __cb)
    {
        return begin_transferBond(bond, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_transferBond(com.example.transfer.dto.Bond bond, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_transferBond(bond, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_transferBond(com.example.transfer.dto.Bond bond, Callback_MainOperator_transferBond __cb)
    {
        return begin_transferBond(bond, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_transferBond(com.example.transfer.dto.Bond bond, java.util.Map<String, String> __ctx, Callback_MainOperator_transferBond __cb)
    {
        return begin_transferBond(bond, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_transferBond(com.example.transfer.dto.Bond bond, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_transferBond(bond, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_transferBond(com.example.transfer.dto.Bond bond, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_transferBond(bond, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_transferBond(com.example.transfer.dto.Bond bond, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_transferBond(bond, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_transferBond(com.example.transfer.dto.Bond bond, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_transferBond(bond, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_transferBond(com.example.transfer.dto.Bond bond, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_transferBond(bond, 
                                  __ctx, 
                                  __explicitCtx, 
                                  __synchronous, 
                                  new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_transferBond(com.example.transfer.dto.Bond bond, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__transferBond_name, __cb);
        try
        {
            __result.prepare(__transferBond_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(bond);
            __os.writePendingObjects();
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_transferBond(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __transferBond_name);
    }

    public static MainOperatorPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), MainOperatorPrx.class, MainOperatorPrxHelper.class);
    }

    public static MainOperatorPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), MainOperatorPrx.class, MainOperatorPrxHelper.class);
    }

    public static MainOperatorPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), MainOperatorPrx.class, MainOperatorPrxHelper.class);
    }

    public static MainOperatorPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), MainOperatorPrx.class, MainOperatorPrxHelper.class);
    }

    public static MainOperatorPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, MainOperatorPrx.class, MainOperatorPrxHelper.class);
    }

    public static MainOperatorPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, MainOperatorPrx.class, MainOperatorPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::com::example::transfer::operator::MainOperator"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, MainOperatorPrx v)
    {
        __os.writeProxy(v);
    }

    public static MainOperatorPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            MainOperatorPrxHelper result = new MainOperatorPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
